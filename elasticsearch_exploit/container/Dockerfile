FROM scratch

#################
# UBUNTU SETUP
#################

# see https://hub.docker.com/_/ubuntu/
# Ubuntu Data
ADD ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /

# a few minor docker-specific tweaks
# see https://github.com/docker/docker/blob/9a9fc01af8fb5d98b8eec0740716226fadb3735c/contrib/mkimage/debootstrap
RUN set -xe \
	&& echo '#!/bin/sh' > /usr/sbin/policy-rc.d \
	&& echo 'exit 101' >> /usr/sbin/policy-rc.d \
	&& chmod +x /usr/sbin/policy-rc.d \
	&& dpkg-divert --local --rename --add /sbin/initctl \
	&& cp -a /usr/sbin/policy-rc.d /sbin/initctl \
	&& sed -i 's/^exit.*/exit 0/' /sbin/initctl \
	&& echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/docker-apt-speedup \
	&& echo 'DPkg::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' > /etc/apt/apt.conf.d/docker-clean \
	&& echo 'APT::Update::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' >> /etc/apt/apt.conf.d/docker-clean \
	&& echo 'Dir::Cache::pkgcache ""; Dir::Cache::srcpkgcache "";' >> /etc/apt/apt.conf.d/docker-clean \
	&& echo 'Acquire::Languages "none";' > /etc/apt/apt.conf.d/docker-no-languages \
	&& echo 'Acquire::GzipIndexes "true"; Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/docker-gzip-indexes \
	&& echo 'Apt::AutoRemove::SuggestsImportant "false";' > /etc/apt/apt.conf.d/docker-autoremove-suggests

# delete all the apt list files since they're big and get stale quickly
RUN rm -rf /var/lib/apt/lists/*
# this forces "apt-get update" in dependent images, which is also good

# enable the universe
RUN sed -i 's/^#\s*\(deb.*universe\)$/\1/g' /etc/apt/sources.list

# make systemd-detect-virt return "docker"
RUN mkdir -p /run/systemd && echo 'docker' > /run/systemd/container

# overwrite this with 'CMD []' in a dependent Dockerfile
CMD ["/bin/bash"]

# UPDATE AND INSTALL apt-get, sudo/chown, wget
RUN \
  apt-get update && \
  apt-get install -y --no-install-recommends apt-utils && \
  apt-get -y install sudo && \
  apt-get -y install wget

#################
# Installation
#################
# INSTALL Python prop
RUN apt-get install -y python-software-properties

# INTSALL cURL
RUN apt-get -y install curl

#INSTALL update, pkg, java
RUN apt-get update
RUN apt-get -y install automake
RUN apt-get -y install pkg-config 
RUN apt-get -y install default-jre
RUN apt-get -y install tcpdump

#################
# Costumization
#################

VOLUME ["/home/victim"]

RUN \
  echo "Everything went fine." && \
  echo "Welcome in the Angular Docker Container!" && \
  echo "You may want to do a cd /share to use the shared volume."

#INSTALL and SETUP elasticsearch
ENTRYPOINT dpkg -i /share/elasticsearch-1.4.2.deb && \
  sed -i 's/#network.bind_host: 192.168.0.1/network.bind_host: 0.0.0.0/g' /etc/elasticsearch/elasticsearch.yml && \
  service elasticsearch start && \
  /bin/bash



